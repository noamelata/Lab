// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/05/2020 21:05:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          game_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module game_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg SingleHitPulse;
reg [3:0] bird_alive;
reg clk;
reg collision;
reg god_mode;
reg out_of_time;
reg pickup_hit;
reg [10:0] playerCoordinates;
reg [7:0] random;
reg rapid_fire;
reg resetN;
reg shoot;
reg startOfFrame;
// wires                                               
wire add_time;
wire [3:0] bird_life;
wire [1:0] bird_speed;
wire [3:0] deploy_bird;
wire deploy_pickup;
wire [7:0] deploy_shot;
wire [15:0] deploy_tree;
wire more_damage;
wire [1:0] num_of_hearts;
wire player_active;
wire player_red;
wire shield;
wire time_to_add_1_3;
wire time_to_add_1_2;
wire time_to_add_1_1;
wire time_to_add_1_0;
wire time_to_add_0_3;
wire time_to_add_0_2;
wire time_to_add_0_1;
wire time_to_add_0_0;
wire [2:0] tree_speed;

// assign statements (if any)                          
game_controller i1 (
// port map - connection between master ports and signals/registers   
	.SingleHitPulse(SingleHitPulse),
	.add_time(add_time),
	.bird_alive(bird_alive),
	.bird_life(bird_life),
	.bird_speed(bird_speed),
	.clk(clk),
	.collision(collision),
	.deploy_bird(deploy_bird),
	.deploy_pickup(deploy_pickup),
	.deploy_shot(deploy_shot),
	.deploy_tree(deploy_tree),
	.god_mode(god_mode),
	.more_damage(more_damage),
	.num_of_hearts(num_of_hearts),
	.out_of_time(out_of_time),
	.pickup_hit(pickup_hit),
	.playerCoordinates(playerCoordinates),
	.player_active(player_active),
	.player_red(player_red),
	.random(random),
	.rapid_fire(rapid_fire),
	.resetN(resetN),
	.shield(shield),
	.shoot(shoot),
	.startOfFrame(startOfFrame),
	.time_to_add_1_3(time_to_add_1_3),
	.time_to_add_1_2(time_to_add_1_2),
	.time_to_add_1_1(time_to_add_1_1),
	.time_to_add_1_0(time_to_add_1_0),
	.time_to_add_0_3(time_to_add_0_3),
	.time_to_add_0_2(time_to_add_0_2),
	.time_to_add_0_1(time_to_add_0_1),
	.time_to_add_0_0(time_to_add_0_0),
	.tree_speed(tree_speed)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// startOfFrame
always
begin
	startOfFrame = 1'b0;
	startOfFrame = #5000 1'b1;
	#5000;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #10000 1'b1;
end 
// random[ 7 ]
initial
begin
	random[7] = 1'b0;
	random[7] = #220000 1'b1;
	random[7] = #300000 1'b0;
end 
// random[ 6 ]
initial
begin
	random[6] = 1'b0;
end 
// random[ 5 ]
initial
begin
	random[5] = 1'b0;
	random[5] = #220000 1'b1;
	random[5] = #300000 1'b0;
end 
// random[ 4 ]
initial
begin
	random[4] = 1'b0;
end 
// random[ 3 ]
initial
begin
	random[3] = 1'b0;
	random[3] = #220000 1'b1;
	random[3] = #300000 1'b0;
end 
// random[ 2 ]
initial
begin
	random[2] = 1'b0;
end 
// random[ 1 ]
initial
begin
	random[1] = 1'b0;
	random[1] = #220000 1'b1;
	random[1] = #300000 1'b0;
end 
// random[ 0 ]
initial
begin
	random[0] = 1'b0;
end 

// pickup_hit
initial
begin
	pickup_hit = 1'b0;
	pickup_hit = #250000 1'b1;
	pickup_hit = #20000 1'b0;
end 
// bird_alive[ 3 ]
initial
begin
	bird_alive[3] = 1'b0;
end 
// bird_alive[ 2 ]
initial
begin
	bird_alive[2] = 1'b0;
end 
// bird_alive[ 1 ]
initial
begin
	bird_alive[1] = 1'b0;
end 
// bird_alive[ 0 ]
initial
begin
	bird_alive[0] = 1'b1;
	bird_alive[0] = #70000 1'b0;
	bird_alive[0] = #10000 1'b1;
	bird_alive[0] = #590000 1'b0;
	bird_alive[0] = #60000 1'b1;
end 

// out_of_time
initial
begin
	out_of_time = 1'b0;
	out_of_time = #880000 1'b1;
	out_of_time = #30000 1'b0;
end 
endmodule

