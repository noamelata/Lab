// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/18/2020 15:41:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          keyToggle_decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module keyToggle_decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg brakee;
reg clk;
reg [8:0] keyCode;
reg make;
reg resetN;
// wires                                               
wire keyIsPressed;
wire keyRisingEdgePulse;
wire keyToggle;

// assign statements (if any)                          
keyToggle_decoder i1 (
// port map - connection between master ports and signals/registers   
	.brakee(brakee),
	.clk(clk),
	.keyCode(keyCode),
	.keyIsPressed(keyIsPressed),
	.keyRisingEdgePulse(keyRisingEdgePulse),
	.keyToggle(keyToggle),
	.make(make),
	.resetN(resetN)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #10000 1'b1;
end 

// make
initial
begin
	make = 1'b0;
	make = #60000 1'b1;
	make = #130000 1'b0;
	make = #40000 1'b1;
	make = #180000 1'b0;
	make = #100000 1'b1;
	make = #190000 1'b0;
end 

// brakee
initial
begin
	brakee = 1'b0;
	brakee = #190000 1'b1;
	brakee = #40000 1'b0;
	brakee = #180000 1'b1;
	brakee = #100000 1'b0;
	brakee = #190000 1'b1;
	brakee = #10000 1'b0;
end 
// keyCode[ 8 ]
initial
begin
	keyCode[8] = 1'b0;
end 
// keyCode[ 7 ]
initial
begin
	keyCode[7] = 1'b0;
end 
// keyCode[ 6 ]
initial
begin
	keyCode[6] = 1'b0;
	keyCode[6] = #510000 1'b1;
	keyCode[6] = #480000 1'b0;
end 
// keyCode[ 5 ]
initial
begin
	keyCode[5] = 1'b0;
	keyCode[5] = #60000 1'b1;
	keyCode[5] = #450000 1'b0;
	keyCode[5] = #480000 1'b1;
end 
// keyCode[ 4 ]
initial
begin
	keyCode[4] = 1'b0;
	keyCode[4] = #510000 1'b1;
	keyCode[4] = #480000 1'b0;
end 
// keyCode[ 3 ]
initial
begin
	keyCode[3] = 1'b0;
	keyCode[3] = #60000 1'b1;
end 
// keyCode[ 2 ]
initial
begin
	keyCode[2] = 1'b0;
end 
// keyCode[ 1 ]
initial
begin
	keyCode[1] = 1'b0;
	keyCode[1] = #510000 1'b1;
	keyCode[1] = #480000 1'b0;
end 
// keyCode[ 0 ]
initial
begin
	keyCode[0] = 1'b0;
	keyCode[0] = #60000 1'b1;
	keyCode[0] = #450000 1'b0;
	keyCode[0] = #480000 1'b1;
end 
endmodule

