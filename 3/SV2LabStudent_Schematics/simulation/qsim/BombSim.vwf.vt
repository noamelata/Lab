// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/18/2020 10:08:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          topBomb
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module topBomb_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg resetN;
reg startN;
reg turbo;
reg waitN;
// wires                                               
wire countEnable;
wire countLoadN;
wire duty50;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire lampDarkN;
wire [3:0] ones;
wire tc;
wire [3:0] tens;

// assign statements (if any)                          
topBomb i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.countEnable(countEnable),
	.countLoadN(countLoadN),
	.duty50(duty50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.lampDarkN(lampDarkN),
	.ones(ones),
	.resetN(resetN),
	.startN(startN),
	.tc(tc),
	.tens(tens),
	.turbo(turbo),
	.waitN(waitN)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #500 1'b1;
	#500;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #10000 1'b1;
	resetN = #440000 1'b0;
	resetN = #20000 1'b1;
end 

// startN
initial
begin
	startN = 1'b1;
	startN = #40000 1'b0;
	startN = #30000 1'b1;
	startN = #420000 1'b0;
	startN = #30000 1'b1;
end 

// turbo
initial
begin
	turbo = 1'b0;
	turbo = #330000 1'b1;
	turbo = #80000 1'b0;
	turbo = #260000 1'b1;
	turbo = #260000 1'b0;
end 

// waitN
initial
begin
	waitN = 1'b1;
	waitN = #160000 1'b0;
	waitN = #60000 1'b1;
end 
endmodule

