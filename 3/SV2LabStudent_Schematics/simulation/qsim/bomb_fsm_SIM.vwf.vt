// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/17/2020 21:40:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          bomb_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bomb_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg resetN;
reg slowClken;
reg startN;
reg tcSec;
reg waitN;
// wires                                               
wire countEnable;
wire countLoadN;
wire lampEnable;
wire lampTest;

// assign statements (if any)                          
bomb_fsm i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.countEnable(countEnable),
	.countLoadN(countLoadN),
	.lampEnable(lampEnable),
	.lampTest(lampTest),
	.resetN(resetN),
	.slowClken(slowClken),
	.startN(startN),
	.tcSec(tcSec),
	.waitN(waitN)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #20000 1'b1;
end 

// slowClken
always
begin
	slowClken = 1'b0;
	slowClken = #20000 1'b1;
	#20000;
end 

// startN
initial
begin
	startN = 1'b1;
	startN = #60000 1'b0;
	startN = #30000 1'b1;
end 

// tcSec
initial
begin
	tcSec = 1'b0;
	tcSec = #530000 1'b1;
	tcSec = #50000 1'b0;
end 

// waitN
initial
begin
	waitN = 1'b1;
	waitN = #190000 1'b0;
	waitN = #220000 1'b1;
end 
endmodule

