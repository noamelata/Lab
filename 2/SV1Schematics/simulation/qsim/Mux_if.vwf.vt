// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/13/2020 15:32:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_4to1_if
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_4to1_if_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] datain;
reg [1:0] sel;
// wires                                               
wire outd;

// assign statements (if any)                          
mux_4to1_if i1 (
// port map - connection between master ports and signals/registers   
	.datain(datain),
	.outd(outd),
	.sel(sel)
);
initial 
begin 
#1000000 $finish;
end 
// datain[ 3 ]
initial
begin
	datain[3] = 1'b0;
	datain[3] = #400000 1'b1;
	datain[3] = #400000 1'b0;
end 
// datain[ 2 ]
initial
begin
	repeat(2)
	begin
		datain[2] = 1'b0;
		datain[2] = #200000 1'b1;
		# 200000;
	end
	datain[2] = 1'b0;
end 
// datain[ 1 ]
always
begin
	datain[1] = 1'b0;
	datain[1] = #100000 1'b1;
	#100000;
end 
// datain[ 0 ]
always
begin
	datain[0] = 1'b0;
	datain[0] = #50000 1'b1;
	#50000;
end 
// sel[ 1 ]
initial
begin
	sel[1] = 1'b0;
	sel[1] = #400000 1'b1;
	sel[1] = #400000 1'b0;
end 
// sel[ 0 ]
initial
begin
	repeat(2)
	begin
		sel[0] = 1'b0;
		sel[0] = #200000 1'b1;
		# 200000;
	end
	sel[0] = 1'b0;
end 
endmodule

