// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 17.0.0 Build 595 04/25/2017 SJ Lite Edition"

// DATE "08/13/2020 16:48:21"

// 
// Device: Altera 5CSXFC6D6F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module hexss (
	hexin,
	darkN,
	LampTest,
	ss);
input 	[3:0] hexin;
input 	darkN;
input 	LampTest;
output 	[6:0] ss;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \ss[0]~output_o ;
wire \ss[1]~output_o ;
wire \ss[2]~output_o ;
wire \ss[3]~output_o ;
wire \ss[4]~output_o ;
wire \ss[5]~output_o ;
wire \ss[6]~output_o ;
wire \hexin[3]~input_o ;
wire \hexin[2]~input_o ;
wire \hexin[1]~input_o ;
wire \hexin[0]~input_o ;
wire \LampTest~input_o ;
wire \darkN~input_o ;
wire \ss~6_combout ;
wire \ss~5_combout ;
wire \ss~4_combout ;
wire \ss~3_combout ;
wire \ss~2_combout ;
wire \ss~1_combout ;
wire \ss~0_combout ;


cyclonev_io_obuf \ss[0]~output (
	.i(\ss~6_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\ss[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \ss[0]~output .bus_hold = "false";
defparam \ss[0]~output .open_drain_output = "false";
defparam \ss[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \ss[1]~output (
	.i(\ss~5_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\ss[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \ss[1]~output .bus_hold = "false";
defparam \ss[1]~output .open_drain_output = "false";
defparam \ss[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \ss[2]~output (
	.i(\ss~4_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\ss[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \ss[2]~output .bus_hold = "false";
defparam \ss[2]~output .open_drain_output = "false";
defparam \ss[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \ss[3]~output (
	.i(\ss~3_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\ss[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \ss[3]~output .bus_hold = "false";
defparam \ss[3]~output .open_drain_output = "false";
defparam \ss[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \ss[4]~output (
	.i(\ss~2_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\ss[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \ss[4]~output .bus_hold = "false";
defparam \ss[4]~output .open_drain_output = "false";
defparam \ss[4]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \ss[5]~output (
	.i(\ss~1_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\ss[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \ss[5]~output .bus_hold = "false";
defparam \ss[5]~output .open_drain_output = "false";
defparam \ss[5]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \ss[6]~output (
	.i(!\ss~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\ss[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \ss[6]~output .bus_hold = "false";
defparam \ss[6]~output .open_drain_output = "false";
defparam \ss[6]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \hexin[3]~input (
	.i(hexin[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\hexin[3]~input_o ));
// synopsys translate_off
defparam \hexin[3]~input .bus_hold = "false";
defparam \hexin[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \hexin[2]~input (
	.i(hexin[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\hexin[2]~input_o ));
// synopsys translate_off
defparam \hexin[2]~input .bus_hold = "false";
defparam \hexin[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \hexin[1]~input (
	.i(hexin[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\hexin[1]~input_o ));
// synopsys translate_off
defparam \hexin[1]~input .bus_hold = "false";
defparam \hexin[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \hexin[0]~input (
	.i(hexin[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\hexin[0]~input_o ));
// synopsys translate_off
defparam \hexin[0]~input .bus_hold = "false";
defparam \hexin[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \LampTest~input (
	.i(LampTest),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\LampTest~input_o ));
// synopsys translate_off
defparam \LampTest~input .bus_hold = "false";
defparam \LampTest~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \darkN~input (
	.i(darkN),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\darkN~input_o ));
// synopsys translate_off
defparam \darkN~input .bus_hold = "false";
defparam \darkN~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \ss~6 (
// Equation(s):
// \ss~6_combout  = ( !\LampTest~input_o  & ( \darkN~input_o  & ( (!\hexin[3]~input_o  & (!\hexin[1]~input_o  & (!\hexin[2]~input_o  $ (!\hexin[0]~input_o )))) # (\hexin[3]~input_o  & (\hexin[0]~input_o  & (!\hexin[2]~input_o  $ (!\hexin[1]~input_o )))) ) ) 
// ) # ( \LampTest~input_o  & ( !\darkN~input_o  ) ) # ( !\LampTest~input_o  & ( !\darkN~input_o  ) )

	.dataa(!\hexin[3]~input_o ),
	.datab(!\hexin[2]~input_o ),
	.datac(!\hexin[1]~input_o ),
	.datad(!\hexin[0]~input_o ),
	.datae(!\LampTest~input_o ),
	.dataf(!\darkN~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\ss~6_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \ss~6 .extended_lut = "off";
defparam \ss~6 .lut_mask = 64'hFFFFFFFF20940000;
defparam \ss~6 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \ss~5 (
// Equation(s):
// \ss~5_combout  = ( !\LampTest~input_o  & ( \darkN~input_o  & ( (!\hexin[3]~input_o  & (\hexin[2]~input_o  & (!\hexin[1]~input_o  $ (!\hexin[0]~input_o )))) # (\hexin[3]~input_o  & ((!\hexin[0]~input_o  & (\hexin[2]~input_o )) # (\hexin[0]~input_o  & 
// ((\hexin[1]~input_o ))))) ) ) ) # ( \LampTest~input_o  & ( !\darkN~input_o  ) ) # ( !\LampTest~input_o  & ( !\darkN~input_o  ) )

	.dataa(!\hexin[3]~input_o ),
	.datab(!\hexin[2]~input_o ),
	.datac(!\hexin[1]~input_o ),
	.datad(!\hexin[0]~input_o ),
	.datae(!\LampTest~input_o ),
	.dataf(!\darkN~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\ss~5_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \ss~5 .extended_lut = "off";
defparam \ss~5 .lut_mask = 64'hFFFFFFFF13250000;
defparam \ss~5 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \ss~4 (
// Equation(s):
// \ss~4_combout  = ( !\LampTest~input_o  & ( \darkN~input_o  & ( (!\hexin[3]~input_o  & (!\hexin[2]~input_o  & (\hexin[1]~input_o  & !\hexin[0]~input_o ))) # (\hexin[3]~input_o  & (\hexin[2]~input_o  & ((!\hexin[0]~input_o ) # (\hexin[1]~input_o )))) ) ) ) 
// # ( \LampTest~input_o  & ( !\darkN~input_o  ) ) # ( !\LampTest~input_o  & ( !\darkN~input_o  ) )

	.dataa(!\hexin[3]~input_o ),
	.datab(!\hexin[2]~input_o ),
	.datac(!\hexin[1]~input_o ),
	.datad(!\hexin[0]~input_o ),
	.datae(!\LampTest~input_o ),
	.dataf(!\darkN~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\ss~4_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \ss~4 .extended_lut = "off";
defparam \ss~4 .lut_mask = 64'hFFFFFFFF19010000;
defparam \ss~4 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \ss~3 (
// Equation(s):
// \ss~3_combout  = ( !\LampTest~input_o  & ( \darkN~input_o  & ( (!\hexin[1]~input_o  & (!\hexin[3]~input_o  & (!\hexin[2]~input_o  $ (!\hexin[0]~input_o )))) # (\hexin[1]~input_o  & ((!\hexin[2]~input_o  & (\hexin[3]~input_o  & !\hexin[0]~input_o )) # 
// (\hexin[2]~input_o  & ((\hexin[0]~input_o ))))) ) ) ) # ( \LampTest~input_o  & ( !\darkN~input_o  ) ) # ( !\LampTest~input_o  & ( !\darkN~input_o  ) )

	.dataa(!\hexin[3]~input_o ),
	.datab(!\hexin[2]~input_o ),
	.datac(!\hexin[1]~input_o ),
	.datad(!\hexin[0]~input_o ),
	.datae(!\LampTest~input_o ),
	.dataf(!\darkN~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\ss~3_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \ss~3 .extended_lut = "off";
defparam \ss~3 .lut_mask = 64'hFFFFFFFF24830000;
defparam \ss~3 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \ss~2 (
// Equation(s):
// \ss~2_combout  = ( !\LampTest~input_o  & ( \darkN~input_o  & ( (!\hexin[1]~input_o  & ((!\hexin[2]~input_o  & ((\hexin[0]~input_o ))) # (\hexin[2]~input_o  & (!\hexin[3]~input_o )))) # (\hexin[1]~input_o  & (!\hexin[3]~input_o  & ((\hexin[0]~input_o )))) 
// ) ) ) # ( \LampTest~input_o  & ( !\darkN~input_o  ) ) # ( !\LampTest~input_o  & ( !\darkN~input_o  ) )

	.dataa(!\hexin[3]~input_o ),
	.datab(!\hexin[2]~input_o ),
	.datac(!\hexin[1]~input_o ),
	.datad(!\hexin[0]~input_o ),
	.datae(!\LampTest~input_o ),
	.dataf(!\darkN~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\ss~2_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \ss~2 .extended_lut = "off";
defparam \ss~2 .lut_mask = 64'hFFFFFFFF20EA0000;
defparam \ss~2 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \ss~1 (
// Equation(s):
// \ss~1_combout  = ( !\LampTest~input_o  & ( \darkN~input_o  & ( (!\hexin[2]~input_o  & (!\hexin[3]~input_o  & ((\hexin[0]~input_o ) # (\hexin[1]~input_o )))) # (\hexin[2]~input_o  & (\hexin[0]~input_o  & (!\hexin[3]~input_o  $ (!\hexin[1]~input_o )))) ) ) 
// ) # ( \LampTest~input_o  & ( !\darkN~input_o  ) ) # ( !\LampTest~input_o  & ( !\darkN~input_o  ) )

	.dataa(!\hexin[3]~input_o ),
	.datab(!\hexin[2]~input_o ),
	.datac(!\hexin[1]~input_o ),
	.datad(!\hexin[0]~input_o ),
	.datae(!\LampTest~input_o ),
	.dataf(!\darkN~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\ss~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \ss~1 .extended_lut = "off";
defparam \ss~1 .lut_mask = 64'hFFFFFFFF089A0000;
defparam \ss~1 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \ss~0 (
// Equation(s):
// \ss~0_combout  = ( \LampTest~input_o  & ( \darkN~input_o  ) ) # ( !\LampTest~input_o  & ( \darkN~input_o  & ( (!\hexin[0]~input_o  & ((!\hexin[3]~input_o  $ (!\hexin[2]~input_o )) # (\hexin[1]~input_o ))) # (\hexin[0]~input_o  & ((!\hexin[2]~input_o  $ 
// (!\hexin[1]~input_o )) # (\hexin[3]~input_o ))) ) ) )

	.dataa(!\hexin[3]~input_o ),
	.datab(!\hexin[2]~input_o ),
	.datac(!\hexin[1]~input_o ),
	.datad(!\hexin[0]~input_o ),
	.datae(!\LampTest~input_o ),
	.dataf(!\darkN~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\ss~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \ss~0 .extended_lut = "off";
defparam \ss~0 .lut_mask = 64'h000000006F7DFFFF;
defparam \ss~0 .shared_arith = "off";
// synopsys translate_on

assign ss[0] = \ss[0]~output_o ;

assign ss[1] = \ss[1]~output_o ;

assign ss[2] = \ss[2]~output_o ;

assign ss[3] = \ss[3]~output_o ;

assign ss[4] = \ss[4]~output_o ;

assign ss[5] = \ss[5]~output_o ;

assign ss[6] = \ss[6]~output_o ;

endmodule
